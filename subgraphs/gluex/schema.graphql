enum SwapType {
  SWAP
  LEND
  INVEST
  LP
}

type Token @entity {
  id: ID! # token address (lowercase)
  symbol: String!
  name: String!
  type: SwapType!
  decimals: Int!
}

type TokenAmount @entity {
  id: ID! # swap-id-input or swap-id-output
  token: Token!
  amount: BigInt!
}

interface SwapInterface {
  id: ID!
  type: SwapType!
  uniquePID: Bytes!
  user: User!
  userAddress: Bytes!
  outputReceiver: Bytes!
  input: TokenAmount!
  output: TokenAmount!
  partnerFee: BigInt!
  routingFee: BigInt!
  partnerShare: BigInt!
  protocolShare: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Swap implements SwapInterface @entity {
  id: ID!
  type: SwapType!
  uniquePID: Bytes!
  user: User!
  userAddress: Bytes!
  outputReceiver: Bytes!
  input: TokenAmount!
  output: TokenAmount!
  partnerFee: BigInt!
  routingFee: BigInt!
  partnerShare: BigInt!
  protocolShare: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type LendSwap implements SwapInterface @entity {
  id: ID!
  type: SwapType!
  uniquePID: Bytes!
  user: User!
  userAddress: Bytes!
  outputReceiver: Bytes!
  input: TokenAmount!
  output: TokenAmount!
  partnerFee: BigInt!
  routingFee: BigInt!
  partnerShare: BigInt!
  protocolShare: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type InvestSwap implements SwapInterface @entity {
  id: ID!
  type: SwapType!
  uniquePID: Bytes!
  user: User!
  userAddress: Bytes!
  outputReceiver: Bytes!
  input: TokenAmount!
  output: TokenAmount!
  partnerFee: BigInt!
  routingFee: BigInt!
  partnerShare: BigInt!
  protocolShare: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type LPSwap implements SwapInterface @entity {
  id: ID!
  type: SwapType!
  uniquePID: Bytes!
  user: User!
  userAddress: Bytes!
  outputReceiver: Bytes!
  input: TokenAmount!
  output: TokenAmount!
  partnerFee: BigInt!
  routingFee: BigInt!
  partnerShare: BigInt!
  protocolShare: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type DailyVolume @entity {
  id: ID! # day-tokenAddress
  date: BigInt!
  token: Token!
  volume: BigInt!
  swapCount: BigInt!
}

type TotalVolume @entity {
  id: ID! # token address
  token: Token!
  totalVolume: BigInt!
  totalSwapCount: BigInt!
}

type GlobalTokenVolume @entity {
  id: ID! # token address
  token: Token!
  totalVolumeIn: BigInt! # Total volume as input token
  totalVolumeOut: BigInt! # Total volume as output token
  totalVolume: BigInt! # Combined total (in + out)
  totalSwapsAsInput: BigInt!
  totalSwapsAsOutput: BigInt!
  totalSwaps: BigInt! # Total times used (input + output)
  uniqueUsers: BigInt! # Number of unique users who traded this token
  lastUpdated: BigInt!
}

type User @entity {
  id: ID! # user address
  totalSwaps: BigInt!
  firstSwapAt: BigInt!
  lastSwapAt: BigInt!
  swaps: [SwapInterface!]! @derivedFrom(field: "user")
  tokenVolumes: [UserTokenVolume!]! @derivedFrom(field: "user")
}

type UserTokenVolume @entity {
  id: ID! # user-token
  user: User!
  token: Token!
  totalVolume: BigInt! # totalInput + totalOutput
  swapCount: BigInt!
  lastUpdated: BigInt!
}

type FeeCollected @entity {
  id: ID!
  tokens: [Bytes!]!
  receiver: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Protocol @entity {
  id: ID! # "protocol"
  totalSwaps: BigInt!
  totalPartnerFees: BigInt!
  totalRoutingFees: BigInt!
  totalProtocolShare: BigInt!
  totalPartnerShare: BigInt!
  uniqueUsers: BigInt!
  tokenVolumes: [ProtocolTokenVolume!]! @derivedFrom(field: "protocol")
}

type ProtocolTokenVolume @entity {
  id: ID! # token address
  protocol: Protocol!
  token: Token!
  totalVolume: BigInt!
  swapCount: BigInt!
  lastUpdated: BigInt!
}
